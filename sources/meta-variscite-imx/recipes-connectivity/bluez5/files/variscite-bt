#!/bin/sh -e
#
# Activate Bluetooth for Variscite DART-6UL / VAR-SOM-MX7 / MX6-VAR-SOM
#
# This script is executed at the end of each multiuser runlevel.
# Make sure that the script will "exit 0" on success or any other
# value on error.
#
# In order to enable or disable this script just change the execution
# bits.

# Load board-specific configuration settings
. /etc/bluetooth/variscite-bt.conf

# Check if BT/WIFI is available
bt_found() {

  if dmesg | grep -q "tuple ${BT_MMC_TUPLE}"; then
    echo "BT found"
    return 0
  else
    echo "No BT found"
    return 1
  fi
}

# Enable BT via GPIO
enable_bt() {
  echo ${BT_GPIO} >/sys/class/gpio/export
  echo "out" > /sys/class/gpio/gpio${BT_GPIO}/direction
  echo 0 > /sys/class/gpio/gpio${BT_GPIO}/value
  sleep 1
  echo 1 > /sys/class/gpio/gpio${BT_GPIO}/value
}

# Get maximum of N numbers
max() {
  printf "%s\n" "$@" | sort -g -r | head -n1
}

# Get BT MAC address
get_bt_macaddr() {
  eth0_addr=$(cat /sys/class/net/eth0/address | sed 's/\://g')
  eth1_addr=$(cat /sys/class/net/eth1/address | sed 's/\://g')
  bt_addr=$(max $eth0_addr $eth1_addr)
  bt_addr=$((0x$bt_addr+1))
  bt_addr=$(printf '%012X' $bt_addr)

  echo $bt_addr | sed 's/\(..\)/\1:/g;s/:$//'
}

###########################
#  Execution starts here  #
###########################

# Exit if BT is not available
bt_found || exit 1

# Enable BT hardware
enable_bt

if [ "${BT_CHIP}" = "wl18xx" ]; then
  # Attach UART to bluetooth stack
  hciattach -t 10 -s 115200 ${BT_TTY_DEV} texas 3000000
  # Enable SCO over HCI
  hcitool cmd 0x3f 0x210 0x01 0x00 0x00 0xff
else
  # Get BT MAC address
  BT_MACADDR=$(get_bt_macaddr)

  # Load BT firmware and set MAC address
  brcm_patchram_plus --patchram ${BT_FIRMWARE} \
		     --enable_hci --bd_addr ${BT_MACADDR} --no2bytes \
		     --baudrate 3000000 \
		     --scopcm=1,0,0,0,0,0,0,0,0,0 \
		     --tosleep 1000 ${BT_TTY_DEV} &
fi

exit 0
